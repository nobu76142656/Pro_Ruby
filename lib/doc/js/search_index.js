var search_data = {"index":{"searchIndex":["gate","object","sampletest","ticket","user","bar()","buy_burger()","calc_fare()","charge()","convert_hash_syntax()","convert_length()","create_users()","edit_name()","edit_name_i=()","enter()","exit()","fizz_buzz()","foo()","full_name()","greeting()","hello()","liquid?()","m!()","new()","new()","new()","stamp()","test_sample()","to_hex()","to_ints()","sample","seed","words"],"longSearchIndex":["gate","object","sampletest","ticket","user","object#bar()","object#buy_burger()","gate#calc_fare()","object#charge()","object#convert_hash_syntax()","object#convert_length()","user::create_users()","user#edit_name()","user#edit_name_i=()","gate#enter()","gate#exit()","object#fizz_buzz()","object#foo()","user#full_name()","object#greeting()","user#hello()","object#liquid?()","object#m!()","gate::new()","ticket::new()","user::new()","ticket#stamp()","sampletest#test_sample()","object#to_hex()","object#to_ints()","","",""],"info":[["Gate","","Gate.html","",""],["Object","","Object.html","",""],["SampleTest","","SampleTest.html","",""],["Ticket","","Ticket.html","",""],["User","","User.html","","<p>クラスメソッドを定義する方法はメソッド名の前にself.を付ける。\n"],["bar","Object","Object.html#method-i-bar","()",""],["buy_burger","Object","Object.html#method-i-buy_burger","(menu, drink, potato)","<p>どの引数がどんな意味を持つのかわかりづらいときがある。\n"],["calc_fare","Gate","Gate.html#method-i-calc_fare","(ticket)",""],["charge","Object","Object.html#method-i-charge","(age)","<p>case文との組み合わせ\n"],["convert_hash_syntax","Object","Object.html#method-i-convert_hash_syntax","(old_syntax)","<p>以上を元に実装する。\n"],["convert_length","Object","Object.html#method-i-convert_length","(length, from: :m, to: :m)","<p>上記をキーワード引数を使うようにする\n"],["create_users","User","User.html#method-c-create_users","(names)","<p>名前の配列を渡すとUserクラスのインスタンスを配列に入れて返す。\n"],["edit_name","User","User.html#method-i-edit_name","(value)","<p>インスタンス変数を外部から変更するためのメソッド attr_accessorの定義によって、記述の必要はない。\n"],["edit_name_i=","User","User.html#method-i-edit_name_i-3D","(value)","<p>を使ったメソッド\n"],["enter","Gate","Gate.html#method-i-enter","(ticket)","<p>Ticketクラスのstampメソッドを呼び出し自分の駅名を渡す。\n"],["exit","Gate","Gate.html#method-i-exit","(ticket)","<p>引数として渡された切符(Ticket)から運賃(fare)と乗車駅を取得。 indexメソッドは配列の中から引数に合致する要素の添え字を取得。\n"],["fizz_buzz","Object","Object.html#method-i-fizz_buzz","(n)",""],["foo","Object","Object.html#method-i-foo","(time = Time.now, message = bar)","<p>デフォルト値ありとなしの引数を混在させることも可能。 動的に変わる値や、他のメソッドの戻り値も引数にできる。\n"],["full_name","User","User.html#method-i-full_name","()","<p>氏名を作成するメソッド\n"],["greeting","Object","Object.html#method-i-greeting","(country)","<p>Rubyは最後に評価された式が戻り値になるのが特徴。戻り値の型情報は書かない。 returnも使えるが、使わないのが主流。\n"],["hello","User","User.html#method-i-hello","()",""],["liquid?","Object","Object.html#method-i-liquid-3F","(temprature)","<p>n以上m以下、n以上m未満の判定。&lt;や&gt;=を使うよりも範囲オブジェクトを使った方が早い。 不等号を使う場合\n"],["m!","Object","Object.html#method-i-m-21","(d)","<p>渡された文字列を破壊的に大文字に変換するメソッド\n"],["new","Gate","Gate.html#method-c-new","(name)",""],["new","Ticket","Ticket.html#method-c-new","(fare)",""],["new","User","User.html#method-c-new","(first_name, last_name, age)",""],["stamp","Ticket","Ticket.html#method-i-stamp","(name)","<p>stampメソッド： 駅名を受け取りTicketクラスのインスタンスに保存。\n"],["test_sample","SampleTest","SampleTest.html#method-i-test_sample","()",""],["to_hex","Object","Object.html#method-i-to_hex","(r, g, b)","<p>inject(たたみ込みメソッド)を使ってさらに短くする。 ブロックの戻り値がinjectメソッド自身の戻り値となる。\n"],["to_ints","Object","Object.html#method-i-to_ints","(hex)","<p>mapメソッドを使ってリファクタリング mapメソッド：空の配列を用意して、他の配列をループ処理した結果を\n空の配列に入れていく処理の大半はmapメソッドで置き換えられる。\n"],["sample","","sample_txt.html","","<p>１行目のテキストです。 ２行目のテキストです。 ３行目のテキストです。\n"],["seed","","seed_txt.html","","<p>@word = Word.new @word.english = expires @word.japanese = 有効期限 @word.save\n<p>@word = Word.new @word.english …\n"],["words","","words_txt.html","","<p>expires 有効期限 authenticated 認証 attribute 属性 article 記事 comparison 比較\nconfirmation 確認 fatal 致命的な denied …\n"]]}}